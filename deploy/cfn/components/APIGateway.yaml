AWSTemplateFormatVersion: 2010-09-09
Description: 'bnkc-skeleton: components: apigateway'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  VariablesStackName:
    Description: 'Stack name of the Variables stack, which holds prefixes and other shared variables'
    Type: String
  IAMStackName:
    Description: Template Name to obtain exports
    Type: String
  S3FullPackagePrefix:
    Description: 'full package s3 prefix including bucket. Holds swagger content'
    Type: 'String'
  LambdaArnPrefix:
    Description: 'DO NOT REMOVE - prefix for lambda ARN - used by generated swagger for simplicity'
    Type: String
  Environment:
    Description: environment name
    Type: String
  BuildNumber:
    Description: Build Number for Provider API
    Type: String
  Component:
    Description: Name of this component
    Default: APIGateway
    Type: String
  StageName:
    Description: Stage to be deployed
    Default: Main
    Type: String
  DomainName:
    Description: Domain name for the connectors
    Type: String
  DomainCertificateArn:
    Description: Arn of the certificate for the custom domain
    Type: String
  LogRetentionDays:
    Description: Number of days to retain API Gateway logs
    Default: '365'
    Type: String

Conditions:
  IsPrd: !Equals
    - !Select
      - '0'
      - !Split
        - d
        - !Ref Environment
    - pr
  IsDev: !Equals
    - !Select
      - '0'
      - !Split
        - v
        - !Ref Environment
    - de
  Is01: !Equals
    - !Select
      - '1'
      - !Split
        - '0'
        - !Ref Environment
    - '1'

Resources:
  # creates an IAM role that will grant account permissions to log API gateway logs to Cloudwatch
  RoleAPICloudWatch:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub
        - '${ResourcePrefix}-APICloudWatch'
        - ResourcePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ResourcePrefix'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs'
      Tags:
        - Key: Product
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Product'

  # creates an IAM role which will allow the API Gateway to invoke our lambda functions
  RoleAPIGatewayInvokeLambda:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub
        - '${ResourcePrefix}-ApiGatewayExecuteApi'
        - ResourcePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ResourcePrefix'
      ManagedPolicyArns:
        - !ImportValue
          'Fn::Sub': '${IAMStackName}-LambdaAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - cloudwatch.amazonaws.com
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Tags:
        - Key: Product
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Product'

  # IAM role for the authoriser lambdas
  RoleAuthoriser:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub
        - '${ResourcePrefix}-RoleAuthoriser'
        - ResourcePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ResourcePrefix'
      ManagedPolicyArns:
        - !ImportValue
          'Fn::Sub': '${IAMStackName}-LoggingAccess'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'

  APIGCloudWatchArnAssign:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt
        - RoleAPICloudWatch
        - Arn

  # lambda for the cloudId Authoriser
  AuthoriserCloudId:
    Type: 'AWS::Lambda::Function'
    Properties:
      Role: !GetAtt
        - RoleAuthoriser
        - Arn
      Code:
        S3Bucket: !ImportValue
          'Fn::Sub': '${VariablesStackName}-S3BucketPackage'
        S3Key: !Sub >-
          ${BuildNumber}/packages/lambda.authoriser.cloudid.zip
      FunctionName: !Sub
        - '${ResourcePrefix}-AuthoriserCloudId'
        - ResourcePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ResourcePrefix'
      Description: Lambda for Authorisation and Claims
      Handler: lib/index.run
      Runtime: nodejs12.x
      Timeout: '20'
      MemorySize: '3008'
      Environment:
        Variables:
          Environment: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Environment'
          validAudiences: !If
            - IsPrd
            - sfdsbanking/sfdsBankingProvider
            - bankingclouddev/sfdsBankingProvider
          validIssuer: !If
            - IsPrd
            - 'https://id.sage.com/'
            - 'https://id-shadow.sage.com/'
          validScopes: Notification
      Tags:
        - Key: Region
          Value: !Ref 'AWS::Region'
        - Key: Environment
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Environment'
        - Key: Component
          Value: !Ref Component
        - Key: Version
          Value: !Ref BuildNumber
        - Key: Product
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Product'
    DependsOn:
      - RoleAuthoriser

  APIGateway:
    Type: 'AWS::Serverless::Api'
    Properties:
      StageName: !Ref StageName
      Name: !Sub
        - '${ResourcePrefix}-api'
        - ResourcePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ResourcePrefix'
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: !Join
              - ''
              - - !Ref S3FullPackagePrefix
                - swagger.yaml
      TracingEnabled: true
      MethodSettings:
        - DataTraceEnabled: false
          HttpMethod: '*'
          LoggingLevel: INFO
          MetricsEnabled: true
          ResourcePath: /*
          ThrottlingBurstLimit: 50
          ThrottlingRateLimit: 100
    DependsOn:
      - RoleAPIGatewayInvokeLambda
      - AuthoriserCloudId

  APIGExecutionsLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub >-
        API-Gateway-Execution-Logs_${APIGateway}/${StageName}
      RetentionInDays: !Ref LogRetentionDays

  # permission set for allowing API gateway to invoke the cloudId lambda
  LambdaInvokeCloudIdPermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt
        - AuthoriserCloudId
        - Arn
      Action: 'lambda:InvokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub >-
        arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${APIGateway}/authorizers/*
    DependsOn:
      - APIGateway
      - AuthoriserCloudId


  #################################################################
  # Custom Domain and Base mapping for referencing in CloudFlare
  #################################################################
  ApiCustomDomainRoute53Env01:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: Is01
    Properties:
      CertificateArn: !Ref DomainCertificateArn
      DomainName: !Sub
        - '${Product}.${DomainName}'
        - Product: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Product'
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2
      Tags:
        - Key: Environment
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Environment'
        - Key: Component
          Value: !Ref Component
        - Key: Product
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Product'

  ApiMappingRoute53Env01:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: Is01
    Properties:
      DomainName: !Ref ApiCustomDomainRoute53Env01
      RestApiId: !Ref APIGateway
      Stage: !Ref StageName
    DependsOn:
      - APIGateway
      - ApiCustomDomainRoute53Env01



  #################################################################
  # Custom Domain and Base mapping for Dev
  #################################################################

  ApiCustomDomainRoute53Dev:
    Type: 'AWS::ApiGateway::DomainName'
    Condition: IsDev
    Properties:
      CertificateArn: !Sub >-
        arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/69d5982f-5e4d-49a9-ae95-82aff61b8459
      DomainName: !Sub
        - '${ResourcePrefix}.connectors.sagebanking-dev.cloud'
        - ResourcePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ResourcePrefix'
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2
      Tags:
        - Key: Environment
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Environment'
        - Key: Component
          Value: !Ref Component
        - Key: Product
          Value: !ImportValue
            'Fn::Sub': '${VariablesStackName}-Product'

  ApiMappingRoute53Dev:
    Type: 'AWS::ApiGateway::BasePathMapping'
    Condition: IsDev
    Properties:
      DomainName: !Ref ApiCustomDomainRoute53Dev
      RestApiId: !Ref APIGateway
      Stage: !Ref StageName
    DependsOn:
      - APIGateway
      - ApiCustomDomainRoute53Dev

  Route53RecordDev:
    Type: 'AWS::Route53::RecordSetGroup'
    Condition: IsDev
    Properties:
      HostedZoneName: connectors.sagebanking-dev.cloud.
      RecordSets:
        - Name: !Ref ApiCustomDomainRoute53Dev
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt
              - ApiCustomDomainRoute53Dev
              - DistributionDomainName
    DependsOn:
      - APIGateway
      - ApiCustomDomainRoute53Dev
      - ApiMappingRoute53Dev

  APIParamStoreValue:
    Type: 'AWS::SSM::Parameter'
    Properties:
      Description: Base URL for the API Gateway
      Name: !Sub
        - '${ParamStorePrefix}/Self.BaseUrl'
        - ParamStorePrefix: !ImportValue
            'Fn::Sub': '${VariablesStackName}-ParamStorePrefix'
      Tags:
        createdBy: !Ref Component
      Tier: Standard
      Type: String
      Value: !Sub >-
        https://${APIGateway}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/
    DependsOn:
      - APIGateway

Outputs:
  StackName:
    Value: !Ref 'AWS::StackName'
    Description: Stack name for this stack
  ApiGatewayApiId:
    Value: !Ref APIGateway
    Description: Api Gateway API ID
